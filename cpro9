#include <stdio.h>
//size of 연산자 시험에 나올 가능성 높음
int main(){
    int a = 3;
    printf("%d\n",sizeof(int));
    printf("%d\n",sizeof(a));
    
    printf("%d\n",sizeof(double));
    printf("%d\n",sizeof("programming"));
    
    int price[5];
    printf("%d\n",sizeof(price));
    printf("%d\n",sizeof(price[0]));
    printf("%d\n",sizeof(price)/sizeof(price[0]));
    
    printf("%d\n",sizeof(char));
    printf("%d\n",sizeof(short));
    printf("%d\n",sizeof(long));
    printf("%d\n",sizeof(long long));
    printf("%d\n",sizeof(float));
    
    
}




//??다시 해보기 뭔가 이상;;
#define RANGE 100
int main(){
    int prime[RANGE + 1];
    
    for (int i = 0; i <= RANGE; i++)  //2~100이 모두 소수라고 가정
        prime[i] = 1;
        
    for (int i = 2; i <= RANGE; i++ ){ //2부터 소수의 배수를 찾아 지움
        if(prime[i] == 1){             //(2의 배수, 3의배수, 5의배우 ,,,)
            for (int j = i*2; j <= RANGE; j += i)
                prime[i] = 0;
        }
    }
    
    printf("%d까지의 소수 목록\n",RANGE);
    for (int i =2; i <= RANGE; i++){   //소수로 살아남은 것들 출력
        if (prime[i])
            printf("%d",i);
    }
}






//순차 탐색. 앞에서 부터 쭉 찾아가기 때문에 좋은 방법이라고 할 수는 없다      
#define SIZE 10
int main(){
    int list[SIZE] = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
    int key, i;
    int found = 0;   //찾지 못했다고 가정
    
    printf("찾는 값 입력:");
    scanf("%d",&key);
    
    for (i = 0; i < SIZE; i++){    //순차탐색(sequential search)
        if (list[i] == key){
            found = 1;   //찾음
            break;
        }
    }
    if (found == 1) printf("찾는 값의 인덱스 = %d\n",i);
    else printf("찾는 값이 없습니다\n");
}





//이진 탐색 (반반 나누기)
#define SIZE 200
int main(){
    int key, list[] = {1, 25, 38,39,55,64,97,180,190,200};
    int found = 0;
    int low = 0, high = sizeof(list) / sizeof(int) - 1, middle;   //찾지 못했다고 가정
    
    printf("찾는 값 입력:");
    scanf("%d",&key);
    
    while (low <= high){
        middle = (low + high) / 2;
        if (key == list[middle]){
            found = 1;
            break;
        }
        else if (key > list[middle]) low =middle + 1;
        else high = middle - 1;
    }
    
    if (found == 1) printf("찾는 값의 인덱스 = %d\n",middle);
    else printf("찾는 값이 없습니다\n");
}






//버블정렬(큰 놈을 뒤로 보내자)
//오름차순
#define SIZE 5
int main(){
    int i, k, list[SIZE]={10, 3, 15, 12, 1};
     
    
    for(int k=0; k < SIZE; k++){
        
        for(int j=0;j < SIZE - 1 - k;j++){
        
            if(list[j] > list[j+1]){
                int temp = list[j];
                list[j]=list[j+1];
                list[j+1]=temp; 
            }
        }
    }
    
    for(int i=0;i<5;i++)
        printf("%d ",list[i]);
    
    
    return 0;
}






//내림차순
#define SIZE 5
int main(){
    int i, k, list[SIZE]={10, 3, 15, 12, 1};
     
    
    for(int k=0; k < SIZE; k++){
        
        for(int j=0;j < SIZE - 1 - k;j++){
        
            if(list[j] < list[j+1]){
                int temp = list[j];
                list[j]=list[j+1];
                list[j+1]=temp; 
                
            }
        }
    }
    
    for(int i=0;i<5;i++)
        printf("%d ",list[i]);
    
    
    return 0;
}









//선택정렬(비교를 통해 확정된 순서는 해당 인덱스에 고정. 그 후 나머지 끼리만 비교)
#define SIZE 5
int main(){
    int i, k, indexOFMIN, list[SIZE]={10, 3, 15, 12, 1};
     
    
    for(int k=0; k < SIZE -1; k++){
        indexOFMIN = k;                          //남은 요소들 중 가장 앞의 것이 가장 작다고 가정
        for(int j = k+1;j < SIZE;j++){
        
            if(list[j] < list[indexOFMIN])  indexOFMIN =j;            //더 작은 것을 발견하면 기록
        }
        if (k != indexOFMIN){
             int temp = list[k];                                      //남은 요소들 중 가장 작은 값이 앞에 오도록 자리 바꿈
             list[k] = list[indexOFMIN];
             list[indexOFMIN] = temp;
        }
    }
    
    for(int i=0;i<SIZE;i++)
        printf("%d ",list[i]);
    
}








