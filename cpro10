#include <stdio.h>
//버블소트와 셀렉션소트 중 편한것 고르기
void bubbleSort(int list[], int size){              //매개변수 (형식인수)는 int list[]
     for (int k = 0; k < size -1;k++){            //size -1등까지 선정
         
         for (int i = 0; i < size -1 -k; i++){    //순위가 결정된 원소 제외하기 위해 -k 
             
             if (list[i] > list[i+1]){            // 크기 순이 아니면(앞의 것이 더 크면)
                 int tmp = list[i];               //서로 교환 (앞 뒤 자리바꿈)
                 list[i] = list[i+1];
                 list[i+1] = tmp;
                 
             }
         }
     }
}


int main(){
    int i, k, data[10] = {16,7,9,1,3,0,45,56,2,7};
    
    bubbleSort(data,10);  //인수(실인수)는 data (배열도 똑같이 값이 복사되어 형식인수로 전달됨)   배열이름 =배열주소 (GPT참고)
    for (i=0;i < 10; i++)   //정렬 결과 출력
        printf("%d", data[i]);
}


//배열의 인수 전달 추가 설명: 쉽게 배열의 주소를 매개 변수에 전달하고
//함수가 그 변수를 찾아가 그 원본 배열을 변경함
//결과적으로 원본 배열이 바뀜
//Pass By Value(값에 의한 전달), Pass By Reference(참조에 의한 전달)
//https://mangkyu.tistory.com/107





void selectionSort(int list[], int size){
     int index;  
     for (int k = 0; k < size -1;k++){            
         index = k;                               //남은 요소들 중 가장 앞의 것이 가장 작다고 가정
          for (int i = K + 1; i < size ; i++){     
               if (list[i] < list[index])
                    index = i;                    //더 작은 것을 발견하면 기록
          }
          if (k != index){                        //자리 바꿈이 필요하
               int tmp = list[k];                 //남은 요소들 중 가장 작은 값 자리에 오도록 자리바꿈
               list[k] = list[index];
               list[index] = tmp;
          }
            
         
     }
     
}

int main (){
     int i, k , data[10] = {16,7,9,1,3,0,45,56,2,7};
     
     selectionSort(data,10);
     for (i = 0; i < 10; i++)
          printf("%d",data[i]);
}







//순차 탐색 어디감...??
//이진 탐색
int binarySearch(int list[],int size,int key){
    int index = -1;
    int low = 0, high = size , middle;
    while (low <= high){
        middle =(low + high) / 2;
        if (key == list[middle]){
            index =middle;
            break;
        }
        else if (key > list[middle]) low = middle + 1;
        else high = middle - 1;
    }
    return index;
}

int main(){
    int key,data[10] = {16,7,9,1,3,0,45,56,2,7};
    printf("찾는 값 입력:");    scanf("%d",&key);
    int index = binarySearch(data,10,1);
    if (index != -1)    printf("찾는 값의 인덱스 = %d",index);
    else    printf("찾는 값이 없습니다.\n");
}


//배열 이름 = 주소

#include <string.h>
int main(){
     //문자(하나) 
     char ch ='a', c; 
     ch = 'a'
     printf("%c\n",ch);
     scanf("%c",&ch);
     printf("%c\n",ch);
     c = ch;
     
     
     //문자열(여러개) char str[] ="abcd"        문자열에 충분한 공간이 있다면 \0을 통해 문자열의 끝을 표시
     char str[100] ="abcd\0", str2[100] = "abc\0";
     printf("%s",str);             //왜 &str 아님? -> srt이 배열이기 떄문에 str자체가 주소
     scanf("%s",str);
     printf("%s\n",str);
     //str2에 str1의 내용을 대입하려면?
     str2 = str1; //오류  why? 배열은 대입 연산 불갸. 배열은 각 원소값을 복사해야 함
     strcpy(str2,str1);  //각 원소 값을 복사하려면 strcpy 함수 필요
     
     //문자열의 글자수 (null문자 제외)는 strlen 함수 사용
     printf("%s의 글자수 %d\n",str2,strlen(str2));
     printf("배열이 차지하는 바이트 수:%d, 배열 원소 수:%d\n",sizeof(str1),sizeof(str1) / sizeof(str1[0]));
     
     //문자열 비교는 strcmp 함수 사용 (결과 값은 str1 - str2 라고 생각)
     if (strcmp(str1,str2) < 0)    printf("%s < %s\n",str1,str2);
     else if (strcmp(str1,str2) > 0)    printf("%s > %s\n",str1,str2);
     else printf("%s == %s\n",str1,str2);
     
}



//c의 문자열은 캐릭터로 표현한다. 


//구조체  (시험 무조건 출제)
struct SHuman{
     char name[12];
     int age;
     double height;
     
};

int main(){
     struct SHuman lee;
     struct SHuman kim ={"jeongwon",22,175.9};
     strcpy(lee.name,"jeongwon");
     lee.age = 20;
     lee.height = 185.3;
     
     printf("%s %d %lf\n",lee.name,lee.age,lee.height);
}

int main(){
     struct SHuman staff[] = {
          {"문종민",46,178.5},
          {"노정란",45,},
          {"문찬영",7,123.4},
          {"권성직",58,172.0},
     };
     printf("이름 = %s, 나이 = %d\n",staff[4].name,staff[4].age);
}
